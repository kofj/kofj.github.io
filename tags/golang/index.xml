<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on 慕薇</title><link>https://blog.kongfanjian.com/tags/golang/</link><description>Recent content in golang on 慕薇</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 20 Feb 2018 16:57:18 +0000</lastBuildDate><atom:link href="https://blog.kongfanjian.com/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 1.10 高效连接构建字符串</title><link>https://blog.kongfanjian.com/post/old/build-append-concatenate-strings-efficiently/</link><pubDate>Tue, 20 Feb 2018 16:57:18 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/build-append-concatenate-strings-efficiently/</guid><description>0x1 简明方法 当程序的效率不是你所在意的问题的时候，fmt.Sprintf 方法是非常好用的： 1 var s = fmt.Sprintf(&amp;#34;Hello, %s!&amp;#34;, &amp;#34;kofj&amp;#34;) // Hello, kofj! 0x2 Go 1.10 以下版本 当我们构建高性能程</description></item><item><title>谈谈umask</title><link>https://blog.kongfanjian.com/post/old/%E8%B0%88%E8%B0%88umask/</link><pubDate>Thu, 16 Nov 2017 23:26:36 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E8%B0%88%E8%B0%88umask/</guid><description>今天做 POC(Proof of Concept) 的时候，遇到了一个小问题——使用 golang 标准库的 os.Mkdir(name string, perm FileMode) 创建得到的文件夹的文件权限和 perm 权限设置的不一样。为什么会这样呢？那就得要谈谈*</description></item><item><title>就要 go get — 私有仓库</title><link>https://blog.kongfanjian.com/post/old/%E5%B0%B1%E8%A6%81-go-get%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</link><pubDate>Fri, 03 Nov 2017 06:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E5%B0%B1%E8%A6%81-go-get%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</guid><description>在开始使用 Golang 之前，从来没有觉得编程能如此的简单。众多的开源库只要 go get 一下就能在自己的项目当中使用了。但是，当我们需要使用一些私有库的时候 go get</description></item><item><title>golang 编译时确认类型的接口实现</title><link>https://blog.kongfanjian.com/post/old/ensure-a-type-implements-an-interface-at-compile-in-go/</link><pubDate>Sat, 30 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/ensure-a-type-implements-an-interface-at-compile-in-go/</guid><description>有经验的同学都会知道，golang 的编译器并不会在代码编译的时候帮我们检查自定义的类型是否正确实现了某个接口。想象一下，一个复杂的应用程序，</description></item><item><title>golang 用 gRPC 构建高性能 API</title><link>https://blog.kongfanjian.com/post/old/golang%E7%94%A8grpc%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDapi/</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/golang%E7%94%A8grpc%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDapi/</guid><description>作为拥有多年经验的软件开发者，我们都知道 API 在系统当中的重要性——它们无处不在，是应用程序的基石，定义着应用程序之间怎么样通讯。日益增进的技术</description></item><item><title>分层确定密钥及 Golang 实现</title><link>https://blog.kongfanjian.com/post/old/hierarchical-deterministic-keys/</link><pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/hierarchical-deterministic-keys/</guid><description>本文三章节分别讲述 分层确定密钥 的起源、基本原理、程序实现。前两节面向所有人科普，第三节需要阅读者掌握 Go 编程语言。阅读全文预计需要 3-5 分钟，感谢</description></item><item><title>GO run multiple files without test</title><link>https://blog.kongfanjian.com/post/old/go-run-multiple-files-without-test/</link><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/go-run-multiple-files-without-test/</guid><description>I am writing a project which has multiple files in the main package, after run go run *.go, I get this assert: go run: cannot run *_test.go files (shortener_test.go) WTF?! So I search Google and get this suggestion: 1 go build &amp;amp;&amp;amp; ./&amp;lt;executable&amp;gt; I don’t think this one is a good solution, so I find another one: 1 go run !(*_test).go Wow, this one is perfect!</description></item><item><title>300行 Golang 实现区块链</title><link>https://blog.kongfanjian.com/post/old/300-line-blockchain-in-go/</link><pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/300-line-blockchain-in-go/</guid><description>0x1 开篇 区块链，时下最火的技术。一篇《A blockchain in 200 lines of code》更是在技术圈里刷屏。在读过 Lauri Hartikka 写的这篇文章和代码后，我愈发对区块链兴趣浓厚。 纸上得</description></item></channel></rss>