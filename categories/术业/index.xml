<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>术业 on 慕薇</title><link>https://blog.kongfanjian.com/categories/%E6%9C%AF%E4%B8%9A.html</link><description>Recent content in 术业 on 慕薇</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 27 Nov 2020 11:50:40 +0800</lastBuildDate><atom:link href="https://blog.kongfanjian.com/categories/%E6%9C%AF%E4%B8%9A/index.xml" rel="self" type="application/rss+xml"/><item><title>Registry 如何向 Docker CLI 抛出定制错误信息</title><link>https://blog.kongfanjian.com/post/2020-11/howto-tell-docker-client-the-error-detail-of-registry.html</link><pubDate>Fri, 27 Nov 2020 11:50:40 +0800</pubDate><guid>https://blog.kongfanjian.com/post/2020-11/howto-tell-docker-client-the-error-detail-of-registry.html</guid><description>背景 在实现容器镜像仓库的时候，我们时常需要向 Docker CLI 抛出一些特定的问题信息，以便于指导用户执行适当的操作。例如，当用户推送镜像时，超出了服务配额</description></item><item><title>Vscode Could't Start Client Rust Language Server</title><link>https://blog.kongfanjian.com/post/2020-10/vscode-couldt-start-client-rust-language-server.html</link><pubDate>Wed, 28 Oct 2020 09:59:28 +0800</pubDate><guid>https://blog.kongfanjian.com/post/2020-10/vscode-couldt-start-client-rust-language-server.html</guid><description>在MacOS使用 Vscode 作为 Rust 开发工具的时候，遇到了报错信息如下： 1 2 3 Couldn&amp;#39;t start client Rust Language Server Rustup not available. Install from https://www.rustup.rs/ 这个错误信息提示说明 Rustup 不可用。搜索 github 找到了rust</description></item><item><title>Go 1.10 高效连接构建字符串</title><link>https://blog.kongfanjian.com/post/old/build-append-concatenate-strings-efficiently.html</link><pubDate>Tue, 20 Feb 2018 16:57:18 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/build-append-concatenate-strings-efficiently.html</guid><description>0x1 简明方法 当程序的效率不是你所在意的问题的时候，fmt.Sprintf 方法是非常好用的： 1 var s = fmt.Sprintf(&amp;#34;Hello, %s!&amp;#34;, &amp;#34;kofj&amp;#34;) // Hello, kofj! 0x2 Go 1.10 以下版本 当我们构建高性能程</description></item><item><title>烦人的 vetur 警告信息</title><link>https://blog.kongfanjian.com/post/old/%E7%83%A6%E4%BA%BA%E7%9A%84-vetur-%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF.html</link><pubDate>Sun, 10 Dec 2017 22:44:12 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E7%83%A6%E4%BA%BA%E7%9A%84-vetur-%E8%AD%A6%E5%91%8A%E4%BF%A1%E6%81%AF.html</guid><description>近期，我开始使用 VSCode 作为自己的集成开发环境。在安装了诸多的扩展插件，耐心调试后，VSCode 用的也是越发顺手。 不过，最近使用 VSCode 时却遇到了个不大</description></item><item><title>谈谈umask</title><link>https://blog.kongfanjian.com/post/old/%E8%B0%88%E8%B0%88umask.html</link><pubDate>Thu, 16 Nov 2017 23:26:36 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E8%B0%88%E8%B0%88umask.html</guid><description>今天做 POC(Proof of Concept) 的时候，遇到了一个小问题——使用 golang 标准库的 os.Mkdir(name string, perm FileMode) 创建得到的文件夹的文件权限和 perm 权限设置的不一样。为什么会这样呢？那就得要谈谈*</description></item><item><title>让 git 公私分明</title><link>https://blog.kongfanjian.com/post/old/%E8%AE%A9-git-%E5%85%AC%E7%A7%81%E5%88%86%E6%98%8E.html</link><pubDate>Mon, 06 Nov 2017 07:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E8%AE%A9-git-%E5%85%AC%E7%A7%81%E5%88%86%E6%98%8E.html</guid><description>作为开源爱好者，我们会大量使用开源代码构建项目，开源自己的代码。同时我们也会受雇于商业公司，为公司开发商业程序。显然的，我们应该公私分明，在</description></item><item><title>就要 go get — 私有仓库</title><link>https://blog.kongfanjian.com/post/old/%E5%B0%B1%E8%A6%81-go-get%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93.html</link><pubDate>Fri, 03 Nov 2017 06:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E5%B0%B1%E8%A6%81-go-get%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93.html</guid><description>在开始使用 Golang 之前，从来没有觉得编程能如此的简单。众多的开源库只要 go get 一下就能在自己的项目当中使用了。但是，当我们需要使用一些私有库的时候 go get</description></item><item><title>golang 用 gRPC 构建高性能 API</title><link>https://blog.kongfanjian.com/post/old/golang%E7%94%A8grpc%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDapi.html</link><pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/golang%E7%94%A8grpc%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BDapi.html</guid><description>作为拥有多年经验的软件开发者，我们都知道 API 在系统当中的重要性——它们无处不在，是应用程序的基石，定义着应用程序之间怎么样通讯。日益增进的技术</description></item><item><title>强化扩展公钥——更安全的选择</title><link>https://blog.kongfanjian.com/post/old/%E5%BC%BA%E5%8C%96%E6%89%A9%E5%B1%95%E5%85%AC%E9%92%A5%E6%9B%B4%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%89%E6%8B%A9.html</link><pubDate>Tue, 26 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/%E5%BC%BA%E5%8C%96%E6%89%A9%E5%B1%95%E5%85%AC%E9%92%A5%E6%9B%B4%E5%AE%89%E5%85%A8%E7%9A%84%E9%80%89%E6%8B%A9.html</guid><description>想象一下这样的场景：在电商网站上，我们需要为每一个用户提供一个比特币的收款地址。如果使用传统的方法，我们需要通过私钥来产生公钥和地址，这使得</description></item><item><title>OneNote代码高亮</title><link>https://blog.kongfanjian.com/post/old/onenote%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE.html</link><pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/onenote%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE.html</guid><description>有言道**『好记性不如烂笔头』**。记笔记是个非常不错的习惯：一来可以帮助我们增强对笔记内容的记忆；二来则是可以在我们遗忘了的时候有处可查。</description></item><item><title>分层确定密钥及 Golang 实现</title><link>https://blog.kongfanjian.com/post/old/hierarchical-deterministic-keys.html</link><pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/hierarchical-deterministic-keys.html</guid><description>本文三章节分别讲述 分层确定密钥 的起源、基本原理、程序实现。前两节面向所有人科普，第三节需要阅读者掌握 Go 编程语言。阅读全文预计需要 3-5 分钟，感谢</description></item><item><title>说说CAA记录</title><link>https://blog.kongfanjian.com/post/old/talk-about-caa.html</link><pubDate>Sat, 09 Sep 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/talk-about-caa.html</guid><description>自2017年9月9日起，所有的 CA 在签发域名证书的时候都必须要检查 CAA DNS 记录。自此，域名所有者可以控制由哪些 CA 给持有的域名签发证书。 0x1 什么是 CAA DNS</description></item><item><title>GO run multiple files without test</title><link>https://blog.kongfanjian.com/post/old/go-run-multiple-files-without-test.html</link><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/go-run-multiple-files-without-test.html</guid><description>I am writing a project which has multiple files in the main package, after run go run *.go, I get this assert: go run: cannot run *_test.go files (shortener_test.go) WTF?! So I search Google and get this suggestion: 1 go build &amp;amp;&amp;amp; ./&amp;lt;executable&amp;gt; I don’t think this one is a good solution, so I find another one: 1 go run !(*_test).go Wow, this one is perfect!</description></item><item><title>300行 Golang 实现区块链</title><link>https://blog.kongfanjian.com/post/old/300-line-blockchain-in-go.html</link><pubDate>Thu, 20 Apr 2017 00:00:00 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/300-line-blockchain-in-go.html</guid><description>0x1 开篇 区块链，时下最火的技术。一篇《A blockchain in 200 lines of code》更是在技术圈里刷屏。在读过 Lauri Hartikka 写的这篇文章和代码后，我愈发对区块链兴趣浓厚。 纸上得</description></item><item><title>JS 遍历 NodeList 对象</title><link>https://blog.kongfanjian.com/post/old/foreach-nodelist-of-javascript.html</link><pubDate>Wed, 14 Dec 2016 04:06:52 +0000</pubDate><guid>https://blog.kongfanjian.com/post/old/foreach-nodelist-of-javascript.html</guid><description>0x1 问题描述 本博客使用的 Yilia 主题在移动设备上有这样一个问题：标签无法正常显示。使用 Chrome 浏览器进行远程调试，捕捉到了下列错误信息： 1 2 3 Uncaught TypeError: $tags.forEach is not a</description></item></channel></rss>